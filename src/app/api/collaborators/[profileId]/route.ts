import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from 'next-auth'
import { prisma } from '@/lib/prisma'
import { authOptions } from '@/lib/auth'
import { canManageCollaborators } from '@/lib/auth-utils'

export async function DELETE(
  request: NextRequest,
  { params }: { params: Promise<{ profileId: string }> }
) {
  try {
    const session = await getServerSession(authOptions)
    
    if (!session?.user) {
      return NextResponse.json(
        { error: 'Non autoris√©' },
        { status: 401 }
      )
    }

    const { profileId } = await params

    // R√©cup√©rer le profil √† d√©sactiver
    const targetProfile = await prisma.profile.findUnique({
      where: { id: profileId },
      include: { user: true }
    })

    if (!targetProfile) {
      return NextResponse.json(
        { error: 'Collaborateur non trouv√©' },
        { status: 404 }
      )
    }

    // V√©rifier que l'utilisateur actuel a les droits sur cette clinique
    const currentUserProfile = await prisma.profile.findFirst({
      where: {
        userId: session.user.id,
        clinicId: targetProfile.clinicId,
      },
    })

    if (!currentUserProfile) {
      return NextResponse.json(
        { error: 'Profil utilisateur non trouv√©' },
        { status: 404 }
      )
    }

    console.log("ROLE!!!!!", currentUserProfile.role, currentUserProfile)
    // V√©rifier que l'utilisateur a les droits (owner, admin ou vet)
    if (!canManageCollaborators(currentUserProfile.role)) {
      return NextResponse.json(
        { error: 'Acc√®s non autoris√© - Seuls les propri√©taires, v√©t√©rinaires et admins peuvent d√©sactiver des collaborateurs' },
        { status: 403 }
      )
    }

    // Ne pas permettre de se d√©sactiver soi-m√™me
    if (targetProfile.userId === session.user.id) {
      return NextResponse.json(
        { error: 'Vous ne pouvez pas vous d√©sactiver vous-m√™me' },
        { status: 400 }
      )
    }

    console.log('üîç D√©sactivation collaborateur:', { profileId, userId: targetProfile.userId })
    
    // Soft delete : d√©sactiver le profil sans supprimer les donn√©es
    try {
      await prisma.$transaction(async (tx) => {
        // V√©rifier s'il y a des donn√©es li√©es (pour information)
        const appointments = await tx.appointment.count({
          where: { veterinarian_id: profileId }
        })
        const medicalRecords = await tx.medicalRecord.count({
          where: { veterinarian_id: profileId }
        })
        const prescriptions = await tx.prescription.count({
          where: { veterinarian_id: profileId }
        })
        const vaccinations = await tx.vaccination.count({
          where: { veterinarian_id: profileId }
        })
        
        console.log('üìä Donn√©es li√©es conserv√©es:', { appointments, medicalRecords, prescriptions, vaccinations })
        
        // D√©sactiver le profil (soft delete)
        await tx.profile.update({
          where: { id: profileId },
          data: {
            isActive: false,
            deactivatedAt: new Date()
          }
        })
      })
      console.log('‚úÖ D√©sactivation r√©ussie')
    } catch (transactionError) {
      console.error('‚ùå Erreur transaction:', transactionError)
      throw transactionError
    }

    return NextResponse.json({
      message: 'Collaborateur d√©sactiv√© avec succ√®s - Les donn√©es m√©dicales et rendez-vous sont conserv√©s'
    })

  } catch (error) {
    console.error('Erreur d√©sactivation collaborateur:', error)
    return NextResponse.json(
      { error: 'Erreur interne du serveur' },
      { status: 500 }
    )
  }
}