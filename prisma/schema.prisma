generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String    @id @default(uuid())
  name                  String?   @db.VarChar(100)
  email                 String    @unique @db.VarChar(255)
  emailVerified         DateTime?
  password              String
  image                 String?   @db.VarChar(255)
  mustChangePassword    Boolean   @default(false)
  profileCompleted      Boolean   @default(false)
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  profile               Profile?
}

model VerificationToken {
  identifier String   @db.VarChar(255)
  token      String   @unique @db.VarChar(255)
  expires    DateTime

  @@unique([identifier, token])
}

model Profile {
  id                String          @id @default(uuid())
  userId            String          @unique
  firstName         String          @db.VarChar(100)
  lastName          String          @db.VarChar(100)
  phone             String?         @db.VarChar(30)
  role              String?         @db.VarChar(50)
  licenseNumber     String?         @db.VarChar(100)
  specialties       String[]        @default([])
  clinicId          String?
  calendarColor     String?         @db.VarChar(20)
  isActive          Boolean         @default(true)
  deactivatedAt     DateTime?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt @default(now())
  appointmentsAsVet Appointment[]   @relation("VeterinarianAppointments")
  medicalRecords    MedicalRecord[] @relation("VeterinarianRecords")
  prescriptions     Prescription[]  @relation("VeterinarianPrescriptions")
  clinic            Clinic?         @relation(fields: [clinicId], references: [id])
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  vaccinations      Vaccination[]   @relation("VeterinarianVaccinations")
}

model Clinic {
  id                 String          @id @default(uuid())
  name               String          @db.VarChar(150)
  email              String?         @db.VarChar(150)
  phone              String?         @db.VarChar(30)
  address            String?         @db.VarChar(255)
  city               String?         @db.VarChar(100)
  postalCode         String?         @db.VarChar(20)
  country            String?         @db.VarChar(100)
  logo_url           String?         @db.VarChar(500)
  subscriptionPlan   String          @default("starter")
  subscriptionStatus String          @default("trial")
  trialEndDate       DateTime?
  stripeCustomerId   String?         @db.VarChar(100)
  stripeSubscriptionId String?      @db.VarChar(100)
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  animals            Animal[]
  appointments       Appointment[]
  invoices           Invoice[]
  medicalRecords     MedicalRecord[]
  owners             Owner[]
  prescriptions      Prescription[]
  profiles           Profile[]
  reminders          Reminder[]
  vaccinations       Vaccination[]
  services           Service[]
  products           Product[]
  stockMovements     StockMovement[]
  files              File[]
}

model Animal {
  id                String          @id @default(uuid())
  clinic_id         String
  owner_id          String
  name              String          @db.VarChar(100)
  species           String          @db.VarChar(50)
  breed             String?         @db.VarChar(100)
  gender            String?         @db.VarChar(10)
  birth_date        DateTime?       @db.Date
  weight            Decimal?        @db.Decimal(5, 2)
  color             String?         @db.VarChar(100)
  microchip         String?         @db.VarChar(20)
  tattoo            String?         @db.VarChar(20)
  sterilized        Boolean         @default(false)
  sterilized_date   DateTime?       @db.Date
  allergies         String?
  status            String?         @default("active") @db.VarChar(20)
  deceased_date     DateTime?       @db.Date
  profile_photo_url String?
  photos            Json?           @default("[]")
  notes             String?
  created_at        DateTime?       @default(now()) @db.Timestamptz(6)
  updated_at        DateTime?       @default(now()) @db.Timestamptz(6)
  species_id        String?
  breed_id          String?
  breedRef          Breed?          @relation("AnimalBreed", fields: [breed_id], references: [id])
  clinic            Clinic          @relation(fields: [clinic_id], references: [id])
  owner             Owner           @relation(fields: [owner_id], references: [id])
  speciesRef        Species?        @relation("AnimalSpecies", fields: [species_id], references: [id])
  appointments      Appointment[]
  medicalRecords    MedicalRecord[]
  prescriptions     Prescription[]
  reminders         Reminder[]
  vaccinations      Vaccination[]
  files             File[]
}

model Appointment {
  id               String          @id @default(uuid())
  clinic_id        String
  animal_id        String
  veterinarian_id  String
  title            String          @db.VarChar(255)
  description      String?
  appointment_date DateTime        @db.Timestamptz(6)
  duration_minutes Int?            @default(30)
  appointment_type String?         @default("consultation") @db.VarChar(50)
  priority         String?         @default("normal") @db.VarChar(20)
  status           String?         @default("scheduled") @db.VarChar(20)
  notes            String?
  internal_notes   String?
  reminder_sent    Boolean         @default(false)
  reminder_sent_at DateTime?       @db.Timestamptz(6)
  created_at       DateTime?       @default(now()) @db.Timestamptz(6)
  updated_at       DateTime?       @default(now()) @db.Timestamptz(6)
  animal           Animal          @relation(fields: [animal_id], references: [id])
  clinic           Clinic          @relation(fields: [clinic_id], references: [id])
  veterinarian     Profile         @relation("VeterinarianAppointments", fields: [veterinarian_id], references: [id])
  invoices         Invoice[]
  medicalRecords   MedicalRecord[]
  reminders        Reminder[]
  stockMovements   StockMovement[]
  files            File[]
}

model Breed {
  id                 String    @id @default(uuid())
  species_id         String
  name               String    @unique @db.VarChar(100)
  origin_country     String?   @db.VarChar(2)
  size_category      String?   @db.VarChar(20)
  average_weight_min Decimal?  @db.Decimal(6, 2)
  average_weight_max Decimal?  @db.Decimal(6, 2)
  average_height_min Int?
  average_height_max Int?
  coat_type          String?   @db.VarChar(50)
  coat_colors        String[]
  genetic_diseases   String[]
  health_notes       String?
  temperament        String[]
  energy_level       Int?
  is_active          Boolean   @default(true)
  popularity_rank    Int?
  description        String?
  care_instructions  String?
  created_at         DateTime? @default(now()) @db.Timestamptz(6)
  updated_at         DateTime? @default(now()) @db.Timestamptz(6)
  animals            Animal[]  @relation("AnimalBreed")
  species            Species   @relation(fields: [species_id], references: [id])
}

model InvoiceItem {
  id            String    @id @default(uuid())
  invoice_id    String
  description   String    @db.VarChar(255)
  quantity      Int
  unit_price    Decimal   @db.Decimal(10, 2)
  total_price   Decimal   @db.Decimal(10, 2)
  tax_rate      Decimal?  @default(20.00) @db.Decimal(5, 2)
  item_type     String?   @db.VarChar(20) // 'product' or 'service'
  product_id    String?
  service_id    String?
  created_at    DateTime? @default(now()) @db.Timestamptz(6)
  invoice       Invoice   @relation(fields: [invoice_id], references: [id])
  product       Product?  @relation(fields: [product_id], references: [id])
  service       Service?  @relation(fields: [service_id], references: [id])
}

model Invoice {
  id             String        @id @default(uuid())
  clinic_id      String
  owner_id       String
  appointment_id String?
  invoice_number String        @unique @db.VarChar(50)
  invoice_date   DateTime      @default(now()) @db.Date
  due_date       DateTime?     @db.Date
  subtotal       Decimal       @default(0) @db.Decimal(10, 2)
  tax_rate       Decimal?      @default(20.00) @db.Decimal(5, 2)
  tax_amount     Decimal       @default(0) @db.Decimal(10, 2)
  total_amount   Decimal       @default(0) @db.Decimal(10, 2)
  payment_status String?       @default("pending") @db.VarChar(20)
  payment_method String?       @db.VarChar(30) // 'cash', 'card', 'check', 'transfer', 'insurance'
  paid_at        DateTime?     @db.Timestamptz(6)
  notes          String?
  created_at     DateTime?     @default(now()) @db.Timestamptz(6)
  updated_at     DateTime?     @default(now()) @db.Timestamptz(6)
  appointment    Appointment?  @relation(fields: [appointment_id], references: [id])
  clinic         Clinic        @relation(fields: [clinic_id], references: [id])
  owner          Owner         @relation(fields: [owner_id], references: [id])
  items          InvoiceItem[]
  stockMovements StockMovement[]
}

model Service {
  id            String    @id @default(uuid())
  clinic_id     String
  code          String    @unique @db.VarChar(50)
  name          String    @db.VarChar(150)
  description   String?
  default_price Decimal   @db.Decimal(10, 2)
  tax_rate      Decimal?  @default(20.00) @db.Decimal(5, 2)
  active        Boolean   @default(true)
  created_at    DateTime? @default(now()) @db.Timestamptz(6)
  updated_at    DateTime? @default(now()) @db.Timestamptz(6)
  clinic        Clinic    @relation(fields: [clinic_id], references: [id])
  invoiceItems  InvoiceItem[]
}

model Product {
  id                 String          @id @default(uuid())
  clinic_id          String
  sku                String          @unique @db.VarChar(50)
  name               String          @db.VarChar(150)
  unit               String          @db.VarChar(20)
  stock_qty          Int
  low_stock_threshold Int
  price              Decimal         @db.Decimal(10, 2)
  tax_rate           Decimal?        @default(20.00) @db.Decimal(5, 2)
  active             Boolean         @default(true)
  created_at         DateTime?       @default(now()) @db.Timestamptz(6)
  updated_at         DateTime?       @default(now()) @db.Timestamptz(6)
  clinic             Clinic          @relation(fields: [clinic_id], references: [id])
  movements          StockMovement[]
  invoiceItems       InvoiceItem[]
}

model StockMovement {
  id            String    @id @default(uuid())
  clinic_id     String
  product_id    String
  type          String    @db.VarChar(20) // 'in', 'out', 'adjust'
  quantity      Int
  reason        String?
  appointment_id String?
  invoice_id    String?
  created_at    DateTime? @default(now()) @db.Timestamptz(6)
  product       Product   @relation(fields: [product_id], references: [id])
  clinic        Clinic    @relation(fields: [clinic_id], references: [id])
  appointment   Appointment? @relation(fields: [appointment_id], references: [id])
  invoice       Invoice?  @relation(fields: [invoice_id], references: [id])
}

model MedicalRecord {
  id                   String         @id @default(uuid())
  clinic_id            String
  animal_id            String
  veterinarian_id      String
  appointment_id       String?
  visit_date           DateTime       @default(now()) @db.Timestamptz(6)
  reason               String         @db.VarChar(255)
  weight               Decimal?       @db.Decimal(5, 2)
  temperature          Decimal?       @db.Decimal(4, 1)
  heart_rate           Int?
  respiratory_rate     Int?
  symptoms             String?
  examination_findings String?
  diagnosis            String?
  treatment_plan       String?
  recommendations      String?
  next_visit_date      DateTime?      @db.Date
  next_visit_reason    String?        @db.VarChar(255)
  documents            Json?          @default("[]")
  created_at           DateTime?      @default(now()) @db.Timestamptz(6)
  updated_at           DateTime?      @default(now()) @db.Timestamptz(6)
  animal               Animal         @relation(fields: [animal_id], references: [id])
  appointment          Appointment?   @relation(fields: [appointment_id], references: [id])
  clinic               Clinic         @relation(fields: [clinic_id], references: [id])
  veterinarian         Profile        @relation("VeterinarianRecords", fields: [veterinarian_id], references: [id])
  prescriptions        Prescription[]
  vaccinations         Vaccination[]
}

model Owner {
  id                String    @id @default(uuid())
  clinic_id         String
  first_name        String    @db.VarChar(100)
  last_name         String    @db.VarChar(100)
  email             String?   @db.VarChar(255)
  phone             String?   @db.VarChar(20)
  mobile            String?   @db.VarChar(20)
  address           String?
  city              String?   @db.VarChar(100)
  postal_code       String?   @db.VarChar(10)
  country           String?   @default("FR") @db.VarChar(2)
  preferred_contact String?   @default("email") @db.VarChar(20)
  marketing_consent Boolean   @default(false)
  notes             String?
  created_at        DateTime? @default(now()) @db.Timestamptz(6)
  updated_at        DateTime? @default(now()) @db.Timestamptz(6)
  animals           Animal[]
  invoices          Invoice[]
  files             File[]
  clinic            Clinic    @relation(fields: [clinic_id], references: [id])
}

model PrescriptionItem {
  id              String       @id @default(uuid())
  prescription_id String
  medication_name String       @db.VarChar(255)
  dosage          String?      @db.VarChar(100)
  frequency       String?      @db.VarChar(100)
  duration        String?      @db.VarChar(100)
  instructions    String?
  quantity        Int?
  unit            String?      @db.VarChar(50)
  created_at      DateTime?    @default(now()) @db.Timestamptz(6)
  prescription    Prescription @relation(fields: [prescription_id], references: [id])
}

model Prescription {
  id                String             @id @default(uuid())
  clinic_id         String
  animal_id         String
  medical_record_id String?
  veterinarian_id   String
  prescription_date DateTime           @default(now()) @db.Date
  status            String?            @default("active") @db.VarChar(20)
  created_at        DateTime?          @default(now()) @db.Timestamptz(6)
  updated_at        DateTime?          @default(now()) @db.Timestamptz(6)
  animal            Animal             @relation(fields: [animal_id], references: [id])
  clinic            Clinic             @relation(fields: [clinic_id], references: [id])
  medicalRecord     MedicalRecord?     @relation(fields: [medical_record_id], references: [id])
  veterinarian      Profile            @relation("VeterinarianPrescriptions", fields: [veterinarian_id], references: [id])
  items             PrescriptionItem[]
}

model Reminder {
  id                     String       @id @default(uuid())
  clinic_id              String
  animal_id              String
  type                   String       @db.VarChar(50)
  title                  String       @db.VarChar(255)
  description            String?
  due_date               DateTime     @db.Date
  status                 String?      @default("pending") @db.VarChar(20)
  priority               String?      @default("normal") @db.VarChar(20)
  sent_at                DateTime?    @db.Timestamptz(6)
  sent_via               String?      @db.VarChar(20)
  related_vaccination_id String?
  related_appointment_id String?
  created_at             DateTime?    @default(now()) @db.Timestamptz(6)
  updated_at             DateTime?    @default(now()) @db.Timestamptz(6)
  animal                 Animal       @relation(fields: [animal_id], references: [id])
  clinic                 Clinic       @relation(fields: [clinic_id], references: [id])
  appointment            Appointment? @relation(fields: [related_appointment_id], references: [id])
  vaccination            Vaccination? @relation(fields: [related_vaccination_id], references: [id])
}

model Species {
  id                   String    @id @default(uuid())
  name                 String    @unique @db.VarChar(100)
  scientific_name      String?   @db.VarChar(150)
  category             String?   @db.VarChar(50)
  average_lifespan_min Int?
  average_lifespan_max Int?
  average_weight_min   Decimal?  @db.Decimal(6, 2)
  average_weight_max   Decimal?  @db.Decimal(6, 2)
  common_diseases      String[]
  vaccination_schedule Json?
  is_active            Boolean   @default(true)
  requires_license     Boolean   @default(false)
  created_at           DateTime? @default(now()) @db.Timestamptz(6)
  updated_at           DateTime? @default(now()) @db.Timestamptz(6)
  animals              Animal[]  @relation("AnimalSpecies")
  breeds               Breed[]
}

model Vaccination {
  id                  String         @id @default(uuid())
  clinic_id           String
  animal_id           String
  medical_record_id   String?
  veterinarian_id     String?
  vaccine_name        String         @db.VarChar(255)
  vaccine_type        String?        @db.VarChar(100)
  batch_number        String?        @db.VarChar(100)
  manufacturer        String?        @db.VarChar(100)
  administration_date DateTime       @db.Date
  injection_site      String?        @db.VarChar(100)
  next_due_date       DateTime?      @db.Date
  reminder_sent       Boolean        @default(false)
  notes               String?
  adverse_reactions   String?
  created_at          DateTime?      @default(now()) @db.Timestamptz(6)
  updated_at          DateTime?      @default(now()) @db.Timestamptz(6)
  reminders           Reminder[]
  animal              Animal         @relation(fields: [animal_id], references: [id])
  clinic              Clinic         @relation(fields: [clinic_id], references: [id])
  medicalRecord       MedicalRecord? @relation(fields: [medical_record_id], references: [id])
  veterinarian        Profile?       @relation("VeterinarianVaccinations", fields: [veterinarian_id], references: [id])
}

model File {
  id              String   @id @default(uuid())
  filename        String   @db.VarChar(255)
  original_name   String   @db.VarChar(255)
  file_url        String   @db.VarChar(500)
  file_size       Int
  mime_type       String   @db.VarChar(100)
  uploaded_at     DateTime @default(now()) @db.Timestamptz(6)
  
  // Relations optionnelles
  appointment_id  String?
  animal_id       String?
  owner_id        String?
  clinic_id       String
  
  // Relations
  appointment     Appointment? @relation(fields: [appointment_id], references: [id], onDelete: Cascade)
  animal          Animal?      @relation(fields: [animal_id], references: [id], onDelete: Cascade)
  owner           Owner?       @relation(fields: [owner_id], references: [id], onDelete: Cascade)
  clinic          Clinic       @relation(fields: [clinic_id], references: [id], onDelete: Cascade)
}
